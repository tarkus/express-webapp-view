// Generated by CoffeeScript 1.7.1
var UglifyJS, crypto, fs, generate, jade, maps, output, path;

fs = require('fs');

path = require('path');

jade = require('jade');

crypto = require('crypto');

UglifyJS = require('uglify-js');

output = {};

maps = {};

generate = function(name, opts) {
  var content, dir, file, func, hash, id, lang, locale, minified, parent_dir, partials, revision, script, sources, src, templates, translate, translated, _i, _len, _ref, _ref1;
  if (opts == null) {
    opts = {};
  }
  templates = {};
  parent_dir = path.dirname(module.parent.filename);
  if (opts.webroot) {
    if (opts.webroot.indexOf("/") !== 0) {
      dir = "" + parent_dir + "/" + opts.webroot + "/" + name + "/views";
    } else {
      dir = "" + opts.webroot + "/" + name + "/views";
    }
  } else {
    dir = "" + parent_dir + "/public/javascripts/" + name + "/views";
  }
  _ref = fs.readdirSync(dir);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    id = file.split(".")[0];
    content = fs.readFileSync(dir + "/" + file).toString();
    if (!opts.i18n) {
      if (templates['all'] == null) {
        templates['all'] = [];
      }
      func = jade.compileClient(content);
      templates['all'].push("templates['" + id + "'] = " + (func.toString()) + ";");
      continue;
    }
    _ref1 = opts.i18n.locales();
    for (lang in _ref1) {
      locale = _ref1[lang];
      if (templates[lang] == null) {
        templates[lang] = [];
      }
      translate = opts.i18n.chose(lang);
      translated = content.replace(/^\s*\=\s*[\!]?t\(['|"]([^'|"]+)['|"]\)/g, function(match, str) {
        return "| " + translate(str);
      });
      translated = translated.replace(/\=\s*[\!]?t\(['|"]([^'|"]+)['|"]\)/g, function(match, str) {
        return translate(str);
      });
      func = jade.compileClient(translated);
      templates[lang].push("templates['" + id + "'] = " + (func.toString()) + ";");
    }
  }
  sources = {};
  for (lang in templates) {
    partials = templates[lang];
    script = " \nif (typeof templates == \"undefined\") templates = {};\n" + (partials.join("\n"));
    minified = UglifyJS.minify(script, {
      fromString: true
    });
    content = minified.code;
    hash = crypto.createHash('md5');
    hash.update(content, "utf-8");
    revision = hash.digest("hex");
    src = "/" + ([name, revision].join("-")) + ".js";
    sources[lang] = {
      content: content,
      revision: revision,
      src: "" + (opts.prefix || '/templates') + src
    };
    maps[src] = content;
  }
  return sources;
};

exports.connect = function(options) {
  var name, _i, _len, _ref;
  if (typeof options.apps === 'string') {
    options.apps = [options.apps];
  }
  _ref = options.apps;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    output[name] = generate(name, options);
  }
  if (options.context == null) {
    options.context = global;
  }
  options.context.templates = output;
  return function(req, res, next) {
    if (maps[req.path] == null) {
      return res.send(404);
    }
    res.set("Content-Type", "application/javascript");
    return res.send(maps[req.path]);
  };
};
